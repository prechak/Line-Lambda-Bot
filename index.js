require("dotenv").config();
const serverless = require("serverless-http");
const express = require("express");
const { Client, middleware } = require("@line/bot-sdk");
const fetch = global.fetch || require("node-fetch");
const { GoogleGenerativeAI } = require("@google/generative-ai");

const lineConfig = {
  channelSecret: process.env.CHANNEL_SECRET,
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
};

if (!lineConfig.channelSecret || !lineConfig.channelAccessToken) {
  throw new Error(
    "Missing CHANNEL_SECRET or CHANNEL_ACCESS_TOKEN in environment variables"
  );
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GEMINI_API_KEY
if (!process.env.GEMINI_API_KEY) {
  console.warn("‚ö†Ô∏è GEMINI_API_KEY not found in environment variables");
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LOGGING_ENDPOINT
if (!process.env.LOGGING_ENDPOINT) {
  console.warn("‚ö†Ô∏è LOGGING_ENDPOINT not found in environment variables");
}

const app = express();
const client = new Client(lineConfig);

app.get("/", (req, res) => res.status(200).json({ status: "ok" }));

app.post("/default/webhook", middleware(lineConfig), async (req, res) => {
  try {
    const result = await Promise.all(req.body.events.map(handleEvent));
    res.json(result);
  } catch (err) {
    console.error(err);
    res.status(500).end();
  }
});

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

async function askGemini(prompt) {
  try {
    if (!process.env.GEMINI_API_KEY) {
      return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key";
    }

    console.log(
      `üîç Using API Key: ${process.env.GEMINI_API_KEY.substring(0, 10)}...`
    );
    console.log(`üîç Prompt: "${prompt}"`);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini API
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error("Gemini API timeout")), 10000);
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
    const simplePrompt = `‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£: ${prompt}`;

    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash",
      generationConfig: {
        temperature: 0.7,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: 500,
      },
    });
    const apiPromise = model.generateContent(simplePrompt);

    const result = await Promise.race([apiPromise, timeoutPromise]);
    console.log(`üîç Gemini result:`, JSON.stringify(result, null, 2));

    const response = await result.response;
    console.log(`üîç Gemini response:`, JSON.stringify(response, null, 2));

    const text = response.text();
    console.log(`üîç Gemini text: "${text}"`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
    if (!text || text.trim() === "") {
      console.warn("‚ö†Ô∏è Gemini returned empty response");
      return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üòÖ";
    }

    return text;
  } catch (error) {
    console.error("‚ùå Gemini Error:", error);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á error
    if (error.message && error.message.includes("API_KEY")) {
      return "‚ùå API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤";
    } else if (error.message && error.message.includes("quota")) {
      return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á";
    } else if (error.message && error.message.includes("timeout")) {
      return "‚è∞ AI ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
    } else {
      return "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
    }
  }
}

// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Apps Script Web App
async function logMessage(userId, sender, message) {
  try {
    if (!process.env.LOGGING_ENDPOINT) {
      console.log(
        `üìù Message not logged (no LOGGING_ENDPOINT) - Sender: ${sender}, UserId: ${userId}, Message: ${message}`
      );
      return;
    }

    console.log(
      `üìù Logging message - Sender: ${sender}, UserId: ${userId}, Message: ${message}`
    );

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Apps Script
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error("Logging timeout")), 5000);
    });

    const fetchPromise = fetch(process.env.LOGGING_ENDPOINT, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ userId, sender, message }),
    });

    await Promise.race([fetchPromise, timeoutPromise]);
    console.log(`‚úÖ Message logged successfully for ${sender}`);
  } catch (error) {
    console.error(`‚ùå Error logging message for ${sender}:`, error);
    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
  }
}

async function handleEvent(event) {
  if (event.type !== "message" || event.message.type !== "text") {
    return Promise.resolve(null);
  }

  const message = event.message.text;
  const userId = event.source.userId;
  let replyText = "‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üìù";

  console.log(
    `üë§ User message received - UserId: ${userId}, Message: ${message}`
  );

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏ú‡∏•)
  logMessage(userId, "user", message).catch((error) => {
    console.error("‚ùå Failed to log user message:", error);
  });

  // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "ai"
  if (message.toLowerCase().startsWith("ai")) {
    const question = message.slice(2).trim();
    if (question) {
      replyText = await askGemini(question);
    } else {
      replyText = await askGemini("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°? üòä");
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ LINE
  if (!replyText || replyText.trim() === "") {
    console.warn("‚ö†Ô∏è Empty reply text detected, using fallback message");
    replyText =
      "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üòÖ";
  }

  console.log(`ü§ñ Bot reply sent - UserId: ${userId}, Reply: ${replyText}`);

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏ó (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏ú‡∏•)
  logMessage(userId, "bot", replyText).catch((error) => {
    console.error("‚ùå Failed to log bot message:", error);
  });

  // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE
  return client.replyMessage(event.replyToken, {
    type: "text",
    text: replyText,
  });
}

module.exports.handler = serverless(app);
